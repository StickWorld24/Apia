/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.46
 * Generated at: 2022-01-09 18:58:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.page;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.st.util.StringUtil;
import com.st.util.labels.LabelManager;
import com.dogma.UserData;
import biz.statum.apia.web.bean.BasicBeanStatic;
import java.io.*;
import com.dogma.Configuration;
import com.dogma.Parameters;
import com.dogma.EnvParameters;
import com.dogma.DogmaException;

public final class dogmaErrorPage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/WEB-INF/system-tags.tld", Long.valueOf(1637234098211L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.dogma.EnvParameters");
    _jspx_imports_classes.add("com.st.util.labels.LabelManager");
    _jspx_imports_classes.add("com.dogma.UserData");
    _jspx_imports_classes.add("biz.statum.apia.web.bean.BasicBeanStatic");
    _jspx_imports_classes.add("com.dogma.Configuration");
    _jspx_imports_classes.add("com.dogma.DogmaException");
    _jspx_imports_classes.add("com.st.util.StringUtil");
    _jspx_imports_classes.add("com.dogma.Parameters");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fsystem_005futil_0026_005fshow_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fsystem_005futil_0026_005fshow_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fsystem_005futil_0026_005fshow_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    java.lang.Throwable exception = org.apache.jasper.runtime.JspRuntimeLibrary.getThrowable(request);
    if (exception != null) {
      response.setStatus(javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    }
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
String rootPath = Parameters.ROOT_PATH;
String strHeaderName = "";

for(java.util.Enumeration e = request.getHeaderNames();e.hasMoreElements() ;){
	String name=(String)e.nextElement();
  strHeaderName +="\n"+name +"="+request.getHeader(name)+" - ";
}

System.out.println("DOGMA ERROR PAGE "+rootPath+" "+request.getHeader("url")+" "+strHeaderName) ;
Object obj = request.getAttribute("javax.servlet.forward.request_uri");
String str = (obj == null) ? null : obj.toString();

if(str!=null){
	System.out.println("Requested URI:" + str); 
}
	
String labelSet = "0001"+String.valueOf(Parameters.DEFAULT_LABEL_SET);
String styleDirectory = "default";
boolean envUsesEntities = false;
Integer environmentId = null;
UserData uData = BasicBeanStatic.getUserDataStatic(request);
Exception rootException = null;
if (uData != null) {
	envUsesEntities = uData.isEnvUsesEntities();
	environmentId = uData.getEnvironmentId();
	labelSet = uData.getStrLabelSetId();
	styleDirectory = EnvParameters.getEnvParameter(environmentId,EnvParameters.ENV_STYLE);
}

      out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"><html lang=\"");
      out.print(biz.statum.apia.web.bean.BasicBeanStatic.getUserDataStatic(request).getLangCode());
      out.write("\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><link href=\"");
      if (_jspx_meth_system_005futil_005f0(_jspx_page_context))
        return;
      out.write("/css/base/pages/error/main.css\" rel=\"stylesheet\" type=\"text/css\" /><style type=\"text/css\">\r\n");
      out.write("			.message{\r\n");
      out.write("				background-color: rgb(249, 237, 184);\r\n");
      out.write("			    border: 1px solid rgb(237, 201, 103);\r\n");
      out.write("		    	color: #707070;\r\n");
      out.write("		    	padding: 5px 20px;\r\n");
      out.write("		    	width: 68%;\r\n");
      out.write("		    	margin-left: 10%;\r\n");
      out.write("		    	text-align: center;\r\n");
      out.write("    		}\r\n");
      out.write("			.outer {\r\n");
      out.write("			    display: table;\r\n");
      out.write("			    position: absolute;\r\n");
      out.write("			    height: 100%;\r\n");
      out.write("			    width: 100%;\r\n");
      out.write("			}\r\n");
      out.write("			.middle {\r\n");
      out.write("			    display: table-cell;\r\n");
      out.write("			    vertical-align: middle;\r\n");
      out.write("			}\r\n");
      out.write("			.inner {\r\n");
      out.write("			    margin-left: auto;\r\n");
      out.write("			    margin-right: auto; \r\n");
      out.write("			    width: /*whatever width you want*/;\r\n");
      out.write("			}\r\n");
      out.write("	\r\n");
      out.write("		</style></head><body>");
if(Configuration.SERVER_MODE){ 
      out.write("<div id=\"bodyDiv\"><div class=\"outer\"><div class=\"middle\"><div class=\"inner\"><div class=\"message\">");
      out.print(LabelManager.getName(labelSet,"msgDogmaErrorPageText") );
      out.write("</div></div></div></div></div>");
}else{ 
      out.write("<div class=\"divContent\"><div class=\"subTit\">EXCEPTION</div><div class=\"section\"><div class=\"dataTit\">Apia Version:</div><div class=\"data\">");
      out.print(com.dogma.DogmaConstants.APIA_VERSION);
      out.write("</div></div>");
 if (exception != null) { 
      out.write("<div class=\"section\"><div class=\"dataTit\">Exception:</div><div class=\"data\">");
      out.print(exception.getClass().getName());
      out.write("</div></div>");

					if (exception instanceof ServletException) {
						if( ((ServletException)exception).getRootCause() instanceof Exception ){
							rootException = (Exception) ((ServletException)exception).getRootCause();
						} 
					} else if (exception instanceof Throwable) {
							rootException = new Exception((Throwable) exception.getCause()); 
					}
					
 } else { 
      out.write("<div class=\"section\"><div class=\"dataTit\">Exception:</div><div class=\"data\">No Exception</div></div>");
 } 
 if (rootException != null) { 
      out.write("<div class=\"section\"><div class=\"dataTit\">Root Exception:</div><div class=\"data\">");
      out.print(rootException.getClass().getName());
      out.write("</div></div>");
 } else { 
      out.write("<div class=\"section\"><div class=\"dataTit\">Root Exception:</div><div class=\"data\">No Root Exception</div></div>");
 } 
      out.write("<div class=\"section\"><div class=\"dataTit\">URL:</div><div class=\"data\">");
      out.print(request.getRequestURI().toString());
      out.write("</div></div><div class=\"section\"><div class=\"dataTit\">Original URL:</div><div class=\"data\">");
      out.print(request.getAttribute("apia.original.url"));
      out.write("</div></div><div class=\"section\"><div class=\"dataTit\">QueryString:</div><div class=\"data\">");
      out.print(StringUtil.escapeHTML(request.getQueryString()));
      out.write("</div></div><div class=\"section\"><div class=\"dataTit\">Type:</div><div class=\"data\">");
if (request.getAttribute("CONTROLER") == null) {
      out.write('J');
      out.write('S');
      out.write('P');
} else {
      out.write("SUBMIT");
}
      out.write("</div></div>");
 if (exception != null) { 
      out.write("<div class=\"section\"><div class=\"dataTit\">Message:</div><div class=\"data\">");
      out.print(StringUtil.escapeHTML(rootException==null?exception.getMessage():rootException.getMessage()));
      out.write("</div></div><div class=\"section\"><div class=\"dataTit\">Localized Message:</div><div class=\"data\">");
      out.print(StringUtil.escapeHTML(rootException==null?exception.getLocalizedMessage():rootException.getLocalizedMessage()));
      out.write("</div></div>");
 } else { 
      out.write("<div class=\"section\"><div class=\"dataTit\">Class:</div><div class=\"data\">No Message</div></div>");
 } 
 if (rootException != null) {
      out.write("<div class=\"subTit\">ROOT CAUSE STACK TRACE</div><div class=\"stack\">");

						if (rootException != null) {
							if (rootException instanceof DogmaException) {
								DogmaException e = (DogmaException) rootException;
								com.dogma.bean.DogmaAbstractBean.logError(request, e.getCompleteStackTrace());
								out.print(StringUtil.escapeHTML(e.getCompleteStackTrace()));
						  	} else {
								ByteArrayOutputStream byteArrayOut = new ByteArrayOutputStream();
								PrintWriter printWriter = new PrintWriter(byteArrayOut);
								rootException.printStackTrace(printWriter);
								//para que ande en jdk 1.3 (iplanet) lo tuve que sacar
								if (rootException.getCause() != null) {
									printWriter.println();
									printWriter.print("\n\n");
									printWriter.println("NATIVE_MSG\n");
									rootException.getCause().printStackTrace(printWriter);
								} 
								printWriter.flush();
								out.print(StringUtil.escapeHTML(byteArrayOut.toString()));
								com.dogma.bean.DogmaAbstractBean.logError(request, byteArrayOut.toString());
							}
						}
					
      out.write("</div>");
}
      out.write("<div class=\"subTit\">STACK TRACE</div><div class=\"stack\">");

						if (exception != null) {
							if (exception instanceof DogmaException) {
								DogmaException e = (DogmaException) exception;
								com.dogma.bean.DogmaAbstractBean.logError(request, e.getCompleteStackTrace());
								out.print(StringUtil.escapeHTML(e.getCompleteStackTrace()));
						  	} else {
								ByteArrayOutputStream byteArrayOut = new ByteArrayOutputStream();
								PrintWriter printWriter = new PrintWriter(byteArrayOut);
								exception.printStackTrace(printWriter);
								//para que ande en jdk 1.3 (iplanet) lo tuve que sacar
								if (exception.getCause() != null) {
									printWriter.println();
									printWriter.print("\n\n");
									printWriter.println("NATIVE_MSG\n");
									exception.getCause().printStackTrace(printWriter);
								}
								printWriter.flush();
								out.print(StringUtil.escapeHTML(byteArrayOut.toString()));
								if (rootException == null) {
									com.dogma.bean.DogmaAbstractBean.logError(request, byteArrayOut.toString());
								}
							}
						}
					
      out.write("</div>");

					if (session.getAttribute("dBean") != null) {
						com.dogma.bean.DogmaAbstractBean absBean = (com.dogma.bean.DogmaAbstractBean) session.getAttribute("dBean");
						if (absBean.getDogmaException() != null) {
				
      out.write("<div class=\"subTit\">Bean Exception</div><div class=\"stack\">");
      out.print(absBean.getDogmaException().getCompleteStackTrace());
      out.write("</div><div class=\"stack\">");

							com.dogma.bean.DogmaAbstractBean.logError(request, absBean.getDogmaException().getCompleteStackTrace());
				
      out.write("</div>");

						}
					}	
				
      out.write("</div>");
}
      out.write("</body></html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_system_005futil_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  system:util
    biz.statum.apia.web.tag.other.UtilTag _jspx_th_system_005futil_005f0 = (biz.statum.apia.web.tag.other.UtilTag) _005fjspx_005ftagPool_005fsystem_005futil_0026_005fshow_005fnobody.get(biz.statum.apia.web.tag.other.UtilTag.class);
    boolean _jspx_th_system_005futil_005f0_reused = false;
    try {
      _jspx_th_system_005futil_005f0.setPageContext(_jspx_page_context);
      _jspx_th_system_005futil_005f0.setParent(null);
      // /page/dogmaErrorPage.jsp(31,291) name = show type = java.lang.String reqTime = false required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_system_005futil_005f0.setShow("context");
      int _jspx_eval_system_005futil_005f0 = _jspx_th_system_005futil_005f0.doStartTag();
      if (_jspx_th_system_005futil_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fsystem_005futil_0026_005fshow_005fnobody.reuse(_jspx_th_system_005futil_005f0);
      _jspx_th_system_005futil_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_system_005futil_005f0, _jsp_getInstanceManager(), _jspx_th_system_005futil_005f0_reused);
    }
    return false;
  }
}
